generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  templates Template[]
  forms     Form[]
  comments  Comment[]
  likes     Like[]
  answers   Answer[]
  formRoles FormRole[]
}

model Template {
  id          String     @id @default(uuid())
  title       String
  description String
  topic       Topic
  tags        String[]
  imageUrl    String
  isPublic    Boolean
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     User       @relation(fields: [creatorId], references: [id])
  questions   Question[]
  forms       Form[]
  comments    Comment[]
  likes       Like[]
}

enum Topic {
  Education
  Workplace
  Health
  Technology
  Entertainment
  Social
  Research
  Feedback
}

model Question {
  id               String   @id @default(uuid())
  templateId       String
  type             QuestionType
  title            String
  description      String
  displayInResults Boolean
  order            Int
  asnwers          Answer[]

  template         Template @relation(fields: [templateId], references: [id])
}

enum QuestionType {
  single_line
  multi_line
  integer
  checkbox
}

model Form {
  id          String   @id @default(uuid())
  templateId  String
  userId      String
  submittedAt DateTime

  template    Template @relation(fields: [templateId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  answers     Answer[]
  comments    Comment[]
  formRoles   FormRole[]
}

model FormRole {
  id        String   @id @default(uuid())
  formId    String
  userId    String
  role      Role

  form      Form     @relation(fields: [formId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  admin
  user
}

model Answer {
  id         String   @id @default(uuid())
  formId     String
  questionId String
  userId     String
  value      Json

  form       Form     @relation(fields: [formId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Comment {
  id          String   @id @default(uuid())
  templateId  String
  userId      String
  formId      String?
  content     String
  createdAt   DateTime @default(now())

  template    Template @relation(fields: [templateId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  form        Form?    @relation(fields: [formId], references: [id])
}

model Like {
  id          String   @id @default(uuid())
  templateId  String
  userId      String

  template    Template @relation(fields: [templateId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}
